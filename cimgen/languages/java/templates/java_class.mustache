/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

package cim4j;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

{{#class_comment}}
/**
 * {{{class_comment}}}
 */
{{/class_comment}}
@SuppressWarnings("unused")
public class {{class_name}} extends {{subclass_of}} {

    private static final Logging LOG = Logging.getLogger({{class_name}}.class);

    /**
     * Constructor.
     */
    public {{class_name}}(String rdfid) {
        super("{{class_name}}", rdfid);
    }

    /**
     * Constructor for subclasses.
     */
    protected {{class_name}}(String cimType, String rdfid) {
        super(cimType, rdfid);
    }
{{#attributes}}

    /**
{{#comment}}
     * {{{comment}}}
{{/comment}}
{{^is_used}}
     *
     * NOT USED
{{/is_used}}
     */
{{#is_primitive_attribute}}
    private {{primitive_java_type}} {{variable_name}}; // {{attribute_class}}

    public {{primitive_java_type}} {{getter_name}}() {
        return {{variable_name}};
    }

    public void {{setter_name}}({{primitive_java_type}} _value_) {
        {{variable_name}} = _value_;
    }

    private static Object {{getter_name}}(BaseClass _this_) {
        return (({{class_name}}) _this_).{{getter_name}}();
    }

{{#is_primitive_string}}
    private static void {{setter_name}}(BaseClass _this_, Object _value_) {
        if (_value_ instanceof String) {
            (({{class_name}}) _this_).{{setter_name}}((String) _value_);
        } else {
            throw new IllegalArgumentException("Object is not String");
        }
    }
{{/is_primitive_string}}
{{^is_primitive_string}}
    private static void {{setter_name}}(BaseClass _this_, Object _value_) {
        if (_value_ instanceof {{primitive_java_type}}) {
            (({{class_name}}) _this_).{{setter_name}}(({{primitive_java_type}}) _value_);
        } else if (_value_ instanceof String) {
            (({{class_name}}) _this_).{{setter_name}}(get{{primitive_java_type}}FromString((String) _value_));
        } else {
            throw new IllegalArgumentException("Object is neither {{primitive_java_type}} nor String");
        }
    }
{{/is_primitive_string}}
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
    private Double {{variable_name}}; // {{attribute_class}}

    public Double {{getter_name}}() {
        return {{variable_name}};
    }

    public void {{setter_name}}(Double _value_) {
        {{variable_name}} = _value_;
    }

    private static Object {{getter_name}}(BaseClass _this_) {
        return (({{class_name}}) _this_).{{getter_name}}();
    }

    private static void {{setter_name}}(BaseClass _this_, Object _value_) {
        if (_value_ instanceof Double) {
            (({{class_name}}) _this_).{{setter_name}}((Double) _value_);
        } else if (_value_ instanceof String) {
            (({{class_name}}) _this_).{{setter_name}}(getDoubleFromString((String) _value_));
        } else {
            throw new IllegalArgumentException("Object is neither Double nor String");
        }
    }
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
    private String {{variable_name}}; // {{attribute_class}}

    public String {{getter_name}}() {
        return {{variable_name}};
    }

    public void {{setter_name}}(String _value_) {
        {{variable_name}} = _value_;
    }

    private static Object {{getter_name}}(BaseClass _this_) {
        return (({{class_name}}) _this_).{{getter_name}}();
    }

    private static void {{setter_name}}(BaseClass _this_, Object _value_) {
        if (_value_ instanceof String) {
            (({{class_name}}) _this_).{{setter_name}}((String) _value_);
        } else {
            throw new IllegalArgumentException("Object is not String");
        }
    }
{{/is_enum_attribute}}
{{#is_class_attribute}}
{{#is_attribute_with_inverse_list}}
    private {{attribute_class}} {{variable_name}}; // ManyToOne
{{/is_attribute_with_inverse_list}}
{{^is_attribute_with_inverse_list}}
    private {{attribute_class}} {{variable_name}}; // OneToOne
{{/is_attribute_with_inverse_list}}

    private String {{variable_name}}Id;

    public {{attribute_class}} {{getter_name}}() {
        return {{variable_name}};
    }

    public void {{setter_name}}({{attribute_class}} _object_) {
        if ({{variable_name}} != _object_) {
            {{variable_name}} = _object_;
{{#inverse_setter}}
            _object_.{{.}}(this);
{{/inverse_setter}}
            {{variable_name}}Id = _object_.getRdfid();
        }
    }

    private static Object {{getter_name}}(BaseClass _this_) {
        var obj = (({{class_name}}) _this_).{{getter_name}}();
        var id = (({{class_name}}) _this_).{{variable_name}}Id;
        if (obj == null && id != null) {
            return id;
        }
        return obj;
    }

    private static void {{setter_name}}(BaseClass _this_, Object _value_) {
        if (_value_ instanceof String) {
            (({{class_name}}) _this_).{{variable_name}}Id = (String) _value_;
        } else if (_value_ instanceof {{attribute_class}}) {
            (({{class_name}}) _this_).{{setter_name}}(({{attribute_class}}) _value_);
        } else {
            throw new IllegalArgumentException("Object is not {{attribute_class}}");
        }
    }
{{/is_class_attribute}}
{{#is_list_attribute}}
{{#is_attribute_with_inverse_list}}
    private Set<{{attribute_class}}> {{variable_name}} = new HashSet<>(); // ManyToMany
{{/is_attribute_with_inverse_list}}
{{^is_attribute_with_inverse_list}}
    private Set<{{attribute_class}}> {{variable_name}} = new HashSet<>(); // OneToMany
{{/is_attribute_with_inverse_list}}

    private Set<String> {{variable_name}}IdSet = new HashSet<>();

    public Set<{{attribute_class}}> {{getter_name}}() {
        return {{variable_name}};
    }

    public void {{setter_name}}({{attribute_class}} _object_) {
        if (!{{variable_name}}.contains(_object_)) {
            {{variable_name}}.add(_object_);
{{#inverse_setter}}
            _object_.{{.}}(this);
{{/inverse_setter}}
            {{variable_name}}IdSet.add(_object_.getRdfid());
        }
    }

    private static Object {{getter_name}}(BaseClass _this_) {
        var objs = (({{class_name}}) _this_).{{getter_name}}();
        var ids = (({{class_name}}) _this_).{{variable_name}}IdSet;
        if (objs.size() < ids.size()) {
            return ids;
        }
        return objs;
    }

    private static void {{setter_name}}(BaseClass _this_, Object _value_) {
        if (_value_ instanceof String) {
            (({{class_name}}) _this_).{{variable_name}}IdSet.add((String) _value_);
        } else if (_value_ instanceof {{attribute_class}}) {
            (({{class_name}}) _this_).{{setter_name}}(({{attribute_class}}) _value_);
        } else {
            throw new IllegalArgumentException("Object is not {{attribute_class}}");
        }
    }
{{/is_list_attribute}}
{{/attributes}}

    /**
     * Get a list of all attribute names of the CIM type.
     *
     * The list includes all inherited attributes. The attribute name is only the
     * last part of the full name (without the class name).
     *
     * @return All attributes of the CIM type
     */
    @Override
    public List<String> getAttributeNames() {
        return ATTR_NAMES_LIST;
    }

    @Override
    protected Map<String, AttrDetails> allAttrDetailsMap() {
        Map<String, AttrDetails> map = new LinkedHashMap<>(CLASS_ATTR_DETAILS_MAP);
        map.putAll(super.allAttrDetailsMap());
        return map;
    }

    /**
     * Get the full name of an attribute.
     *
     * The full name is "<class_name>.<attribute_name>".
     *
     * @param attrName The attribute name
     * @return         The full name
     */
    @Override
    public String getAttributeFullName(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) ? ATTR_DETAILS_MAP.get(attrName).fullName : null;
    }

    /**
     * Get an attribute value.
     *
     * @param attrName The attribute name
     * @return         The attribute value
     */
    @Override
    public Object getAttribute(String attrName) {
        if (ATTR_DETAILS_MAP.containsKey(attrName)) {
            var getterFunction = ATTR_DETAILS_MAP.get(attrName).getter;
            return getterFunction.apply(this);
        }
        LOG.error(String.format("No-one knows an attribute %s.%s", "{{class_name}}", attrName));
        return "";
    }

    /**
     * Set an attribute value.
     *
     * @param attrName The attribute name
     * @param value    The attribute value
     */
    @Override
    public void setAttribute(String attrName, Object value) {
        if (ATTR_DETAILS_MAP.containsKey(attrName)) {
            var setterFunction = ATTR_DETAILS_MAP.get(attrName).setter;
            setterFunction.accept(this, value);
        } else {
            LOG.error(String.format("No-one knows what to do with attribute %s.%s and value %s",
                "{{class_name}}", attrName, value));
        }
    }

    /**
     * Check if the attribute is a primitive attribute.
     *
     * This includes datatype_attributes.
     *
     * @param attrName The attribute name
     * @return         Is it a primitive attribute?
     */
    @Override
    public boolean isPrimitiveAttribute(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) && ATTR_DETAILS_MAP.get(attrName).isPrimitive;
    }

    /**
     * Check if the attribute is an enum attribute.
     *
     * @param attrName The attribute name
     * @return         Is it an enum attribute?
     */
    @Override
    public boolean isEnumAttribute(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) && ATTR_DETAILS_MAP.get(attrName).isEnum;
    }

    /**
     * Check if the attribute is used.
     *
     * Some attributes are declared as unused in the CGMES definition. In most cases
     * these are list attributes, i.e. lists of links to other CIM objects. But
     * there are some exceptions, e.g. the list of ToplogicalNodes in
     * TopologicalIsland.
     *
     * @param attrName The attribute name
     * @return         Is the attribute used?
     */
    @Override
    public boolean isUsedAttribute(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) && ATTR_DETAILS_MAP.get(attrName).isUsed;
    }

    /**
     * Get the namespace URL of an object of this class.
     *
     * @return The namespace URL
     */
    @Override
    public String getClassNamespaceUrl() {
        return CLASS_NAMESPACE;
    }

    /**
     * Get the namespace URL of an attribute (also for inherited attributes).
     *
     * @return The namespace URL
     */
    @Override
    public String getAttributeNamespaceUrl(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) ? ATTR_DETAILS_MAP.get(attrName).nameSpace : null;
    }

    /**
     * A resource can be used by multiple profiles. This is the set of profiles
     * where this element can be found.
     *
     * @return All possible profiles for an object of this class
     */
    @Override
    public Set<CGMESProfile> getPossibleProfiles() {
        return POSSIBLE_PROFILES;
    }

    /**
     * This is the profile with most of the attributes.
     * It should be used to write the data to as few as possible files.
     *
     * @return The recommended profiles for an object of this class
     */
    @Override
    public CGMESProfile getRecommendedProfile() {
        return RECOMMENDED_PROFILE;
    }

    /**
     * Get the possible profiles of an attribute (also for inherited attributes).
     *
     * @return All possible profiles for an attribute
     */
    @Override
    public Set<CGMESProfile> getPossibleAttributeProfiles(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) ? ATTR_DETAILS_MAP.get(attrName).profiles : null;
    }

    /**
     * Get the possible profiles for an object of this class including the possible
     * profiles of all direct or inherited attributes.
     *
     * A resource can be used by multiple profiles. This is the set of profiles
     * where this element or an attribute of this element can be found.
     *
     * @return All possible profiles for an object of this class and its attributes
     */
    @Override
    public Set<CGMESProfile> getPossibleProfilesIncludingAttributes() {
        return POSSIBLE_PROFILES_INCLUDING_ATTRIBUTES;
    }

    /**
     * Private infos.
     */

    private static final String CLASS_NAMESPACE = "{{class_namespace}}";

    private static final List<String> ATTR_NAMES_LIST;
    private static final Map<String, AttrDetails> ATTR_DETAILS_MAP;
    private static final Map<String, AttrDetails> CLASS_ATTR_DETAILS_MAP;
    static {
        Map<String, AttrDetails> map = new LinkedHashMap<>();
{{#attributes}}
        {
            Set<CGMESProfile> profiles = new LinkedHashSet<>();
{{#attr_origin}}
            profiles.add(CGMESProfile.{{.}});
{{/attr_origin}}
{{#is_primitive_attribute}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", true, "{{attribute_namespace}}", profiles, true, false, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", true, "{{attribute_namespace}}", profiles, true, false, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", true, "{{attribute_namespace}}", profiles, false, true, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_enum_attribute}}
{{#is_class_attribute}}
{{#is_used}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", true, "{{attribute_namespace}}", profiles, false, false, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_used}}
{{^is_used}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", false, "{{attribute_namespace}}", profiles, false, false, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_used}}
{{/is_class_attribute}}
{{#is_list_attribute}}
{{#is_used}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", true, "{{attribute_namespace}}", profiles, false, false, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_used}}
{{^is_used}}
            map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", false, "{{attribute_namespace}}", profiles, false, false, {{class_name}}::{{getter_name}}, {{class_name}}::{{setter_name}}));
{{/is_used}}
{{/is_list_attribute}}
        }
{{/attributes}}
        CLASS_ATTR_DETAILS_MAP = map;
        ATTR_DETAILS_MAP = Collections.unmodifiableMap(new {{class_name}}(null).allAttrDetailsMap());
        ATTR_NAMES_LIST = new ArrayList<>(ATTR_DETAILS_MAP.keySet());
    }

    private static final Set<CGMESProfile> POSSIBLE_PROFILES;
    static {
        Set<CGMESProfile> profiles = new LinkedHashSet<>();
{{#class_origin}}
        profiles.add(CGMESProfile.{{.}});
{{/class_origin}}
        POSSIBLE_PROFILES = Collections.unmodifiableSet(profiles);
    }

    private static final CGMESProfile RECOMMENDED_PROFILE = CGMESProfile.{{recommended_class_profile}};

    private static final Set<CGMESProfile> POSSIBLE_PROFILES_INCLUDING_ATTRIBUTES;
    static {
        Set<CGMESProfile> profiles = new LinkedHashSet<>(POSSIBLE_PROFILES);
        for (var attrDetails : ATTR_DETAILS_MAP.values()) {
            profiles.addAll(attrDetails.profiles);
        }
        POSSIBLE_PROFILES_INCLUDING_ATTRIBUTES = Collections.unmodifiableSet(profiles);
    }
}
