/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

package cim4jdb;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

import lombok.Data;
import lombok.EqualsAndHashCode;

import org.springframework.data.repository.CrudRepository;

{{#class_comment}}
/**
 * {{{class_comment}}}
 */
{{/class_comment}}
@Data
@Entity
@EqualsAndHashCode(callSuper = true)
@SuppressWarnings("unused")
{{#special_table_name}}
@Table(name = "{{special_table_name}}")
{{/special_table_name}}
public class {{class_name}} extends {{subclass_of}} {

    private static final Logging LOG = Logging.getLogger({{class_name}}.class);
    private static final String CLASS_NAMESPACE = "{{class_namespace}}";

    /**
     * Default constructor.
     */
    public {{class_name}}() {
        setCimType("{{class_name}}");
    }
{{#attributes}}

{{#is_really_used}}
{{#comment}}
    /**
     * {{comment}}
{{^is_used}}
     *
     * (shouldn't have used, but is class attribute with inverse list)
{{/is_used}}
     */
{{/comment}}
{{#is_primitive_attribute}}
{{#special_column_name}}
    @Column(name = "{{special_column_name}}")
{{/special_column_name}}
{{#primitive_java_type}}
    private {{primitive_java_type}} {{> label_without_keyword}}; // {{attribute_class}}

    public String {{label}}ToString() {
        return {{> label_without_keyword}} != null ? {{> label_without_keyword}}.toString() : null;
    }

    public void {{label}}FromString(String stringValue) {
        {{> label_without_keyword}} = get{{primitive_java_type}}FromString(stringValue);
    }
{{/primitive_java_type}}
{{^primitive_java_type}}
    private {{attribute_class}} {{> label_without_keyword}};

    public String {{label}}ToString() {
        return {{> label_without_keyword}} != null ? {{> label_without_keyword}}.toString() : null;
    }

    public void {{label}}FromString(String stringValue) {
        {{> label_without_keyword}} = get{{attribute_class}}FromString(stringValue);
    }
{{/primitive_java_type}}
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
{{#special_column_name}}
    @Column(name = "{{special_column_name}}")
{{/special_column_name}}
    private Double {{label}}; // {{attribute_class}}

    public String {{label}}ToString() {
        return {{label}} != null ? {{label}}.toString() : null;
    }

    public void {{label}}FromString(String stringValue) {
        {{label}} = getDoubleFromString(stringValue);
    }
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
{{#special_column_name}}
    @Column(name = "{{special_column_name}}")
{{/special_column_name}}
    private String {{label}}; // {{attribute_class}}

    public String {{label}}ToString() {
        return {{label}};
    }

    public void {{label}}FromString(String stringValue) {
        {{label}} = stringValue;
    }
{{/is_enum_attribute}}
{{#is_class_attribute}}
{{#is_class_attribute_with_inverse_list}}
    private String {{label}}; // ManyToOne {{attribute_class}}

    public String {{label}}ToString() {
        return {{label}};
    }

    public void {{label}}FromString(String stringValue) {
        {{label}} = stringValue;
    }
{{/is_class_attribute_with_inverse_list}}
{{^is_class_attribute_with_inverse_list}}
    private String {{label}}; // OneToOne {{attribute_class}}

    public String {{label}}ToString() {
        return {{label}};
    }

    public void {{label}}FromString(String stringValue) {
        {{label}} = stringValue;
    }
{{/is_class_attribute_with_inverse_list}}
{{/is_class_attribute}}
{{/is_really_used}}
{{^is_really_used}}
    /**
{{#comment}}
     * {{comment}}
{{/comment}}
     *
     * NOT USED
{{#is_primitive_attribute}}
{{#special_column_name}}
    * @Column(name = "{{special_column_name}}")
{{/special_column_name}}
{{#primitive_java_type}}
     * private {{primitive_java_type}} {{> label_without_keyword}}; // {{attribute_class}}
{{/primitive_java_type}}
{{^primitive_java_type}}
     * private {{attribute_class}} {{> label_without_keyword}};
{{/primitive_java_type}}
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
{{#special_column_name}}
     * @Column(name = "{{special_column_name}}")
{{/special_column_name}}
     * private Double {{label}}; // {{attribute_class}}
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
{{#special_column_name}}
     * @Column(name = "{{special_column_name}}")
{{/special_column_name}}
     * private String {{label}}; // {{attribute_class}}
{{/is_enum_attribute}}
{{#is_class_attribute}}
{{#is_class_attribute_with_inverse_list}}
     * private String {{label}}; // ManyToOne {{attribute_class}}
{{/is_class_attribute_with_inverse_list}}
{{^is_class_attribute_with_inverse_list}}
     * private String {{label}}; // OneToOne {{attribute_class}}
{{/is_class_attribute_with_inverse_list}}
{{/is_class_attribute}}
{{#is_list_attribute}}
{{#is_used}}
     * (should have used, but is list attribute)
{{/is_used}}
     * private Set<String> {{label}} = new HashSet<>(); // OneToMany Set<{{attribute_class}}>
{{/is_list_attribute}}
     */
{{/is_really_used}}
{{/attributes}}

    /**
     * Nested repository. The implementation is automatically created.
     */
    public interface Repository extends CrudRepository<{{class_name}}, Long> {
    }

    /**
     * Get a list of all attribute names of the CIM type.
     *
     * The list includes all inherited attributes. The attribute name is only the
     * last part of the full name (without the class name).
     *
     * @return All attributes of the CIM type
     */
    @Override
    public List<String> getAttributeNames() {
        return ATTR_NAMES_LIST;
    }

    private static final List<String> ATTR_NAMES_LIST;
    private static final Map<String, AttrDetails> ATTR_DETAILS_MAP;
    static {
        ATTR_DETAILS_MAP = new {{class_name}}().allAttrDetailsMap();
        ATTR_NAMES_LIST = new ArrayList<>(ATTR_DETAILS_MAP.keySet());
    }

    @Override
    protected Map<String, AttrDetails> allAttrDetailsMap() {
        Map<String, AttrDetails> map = new LinkedHashMap<>(classAttrDetailsMap);
        map.putAll(super.allAttrDetailsMap());
        map.remove("LAST_ATTRIBUTE");
        return map;
    }

    @Transient
    private final Map<String, AttrDetails> classAttrDetailsMap = fillClassAttrDetailsMap();

    private Map<String, AttrDetails> fillClassAttrDetailsMap() {
        Map<String, AttrDetails> map = new LinkedHashMap<>();
{{#attributes}}
{{#is_really_used}}
{{#is_primitive_attribute}}
        map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", this::{{label}}ToString, this::{{label}}FromString, true, false, true, "{{attribute_namespace}}"));
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
        map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", this::{{label}}ToString, this::{{label}}FromString, true, false, true, "{{attribute_namespace}}"));
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
        map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", this::{{label}}ToString, this::{{label}}FromString, false, true, true, "{{attribute_namespace}}"));
{{/is_enum_attribute}}
{{#is_class_attribute}}
        map.put("{{label}}", new AttrDetails("{{class_name}}.{{label}}", this::{{label}}ToString, this::{{label}}FromString, false, false, true, "{{attribute_namespace}}"));
{{/is_class_attribute}}
{{/is_really_used}}
{{/attributes}}
        return map;
    }

    /**
     * Get the full name of an attribute.
     *
     * The full name is "<class_name>.<attribute_name>".
     *
     * @param attrName The attribute name
     * @return         The full name
     */
    @Override
    public String getAttributeFullName(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) ? ATTR_DETAILS_MAP.get(attrName).fullName : null;
    }

    /**
     * Get an attribute value as string.
     *
     * @param attrName The attribute name
     * @return         The attribute value
     */
    @Override
    public String getAttribute(String attrName) {
        return getAttribute("{{class_name}}", attrName);
    }

    @Override
    protected String getAttribute(String className, String attrName) {
        if (classAttrDetailsMap.containsKey(attrName)) {
            var getterFunction = classAttrDetailsMap.get(attrName).getter;
            return getterFunction.get();
        }
        return super.getAttribute(className, attrName);
    }

    /**
     * Set an attribute value.
     *
     * @param attrName    The attribute name
     * @param stringValue The attribute value as string
     */
    @Override
    public void setAttribute(String attrName, String stringValue) {
        setAttribute("{{class_name}}", attrName, stringValue);
    }

    @Override
    protected void setAttribute(String className, String attrName, String stringValue) {
        if (classAttrDetailsMap.containsKey(attrName)) {
            var setterFunction = classAttrDetailsMap.get(attrName).setter;
            setterFunction.accept(stringValue);
        } else {
            super.setAttribute(className, attrName, stringValue);
        }
    }

    /**
     * Check if the attribute is a primitive attribute.
     *
     * This includes datatype_attributes.
     *
     * @param attrName The attribute name
     * @return         Is it a primitive attribute?
     */
    @Override
    public boolean isPrimitiveAttribute(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) && ATTR_DETAILS_MAP.get(attrName).isPrimitive;
    }

    /**
     * Check if the attribute is an enum attribute.
     *
     * @param attrName The attribute name
     * @return         Is it an enum attribute?
     */
    @Override
    public boolean isEnumAttribute(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) && ATTR_DETAILS_MAP.get(attrName).isEnum;
    }

    /**
     * Check if the attribute is used.
     *
     * Some attributes are declared as unused in the CGMES definition. In most cases
     * these are list attributes, i.e. lists of links to other CIM objects. But
     * there are some exceptions, e.g. the list of ToplogicalNodes in
     * TopologicalIsland.
     *
     * @param attrName The attribute name
     * @return         Is the attribute used?
     */
    @Override
    public boolean isUsedAttribute(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) && ATTR_DETAILS_MAP.get(attrName).isUsed;
    }

    /**
     * Get the namespace URL of an object of this class.
     *
     * @return The namespace URL
     */
    @Override
    public String getClassNamespaceUrl() {
        return CLASS_NAMESPACE;
    }

    /**
     * Get the namespace URL of an attribute (also for inherited attributes).
     *
     * @return The namespace URL
     */
    @Override
    public String getAttributeNamespaceUrl(String attrName) {
        return ATTR_DETAILS_MAP.containsKey(attrName) ? ATTR_DETAILS_MAP.get(attrName).nameSpace : null;
    }
}
