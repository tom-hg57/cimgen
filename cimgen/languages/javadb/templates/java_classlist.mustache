/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

package cim4jdb;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Service;

@Service
public final class CimClassMap {

    /**
     * Checks if the class name is known as CIM class.
     *
     * @param className The class name to check.
     * @return          Is this a CIM class?
     */
    public static boolean isCimClass(String className) {
        return CREATE_MAP.containsKey(className);
    }

    /**
     * Creates a new CIM object.
     *
     * @param className The class name of the new CIM object.
     * @param rdfid     The RDF ID of the CIM object read from rdf:ID or rdf:about.
     * @return          The new CIM object.
     */
    public static BaseClass createCimObject(String className, String rdfid) {
        var createFunction = CREATE_MAP.get(className);
        return createFunction.apply(rdfid);
    }

    /**
     * Creates a new CIM object (as object of the correct class).
     *
     * @param clazz The class of the new CIM object.
     * @param rdfid The RDF ID of the CIM object read from rdf:ID or rdf:about.
     * @return      The new CIM object.
     */
    @SuppressWarnings("unchecked")
    public static <T extends BaseClass> T createCimObject(Class<T> clazz, String rdfid) {
        var className = clazz.getSimpleName();
        return (T) createCimObject(className, rdfid);
    }

    /**
     * Saves several CIM objects of the same type to the database.
     *
     * The CIM objects have to be instances of the right class corresponding to the
     * class name. The save function calls the saveAll method of the repository
     * embedded in this class.
     *
     * The save, read and delete functions couldn't be static because they use the
     * repositories as Java Beans.
     *
     * @param className The class name of the CIM objects.
     * @param objList   The list of CIM objects.
     * @return          The list of saved CIM objects.
     */
    public Iterable<BaseClass> saveCimObjects(String className, Iterable<BaseClass> objList) {
        var saveFunction = SAVE_MAP.get(className);
        return saveFunction.apply(objList);
    }

    /**
     * Saves several CIM objects of the same type to the database.
     *
     * @param clazz   The class of the CIM objects.
     * @param objList The list of CIM objects.
     * @return        The list of saved CIM objects.
     */
    @SuppressWarnings("unchecked")
    public <T extends BaseClass> Iterable<T> saveCimObjects(Class<? extends BaseClass> clazz, Iterable<T> objList) {
        var className = clazz.getSimpleName();
        return (Iterable<T>) saveCimObjects(className, (Iterable<BaseClass>) objList);
    }

    /**
     * Reads several CIM objects of the same type from the database.
     *
     * The CIM objects have to be instances of the right class corresponding to the
     * class name. The read function calls the findAllById method of the repository
     * embedded in this class.
     *
     * @param className The class name of the CIM objects.
     * @param idList    The list of IDs of the CIM objects.
     * @return          The list of read CIM objects.
     */
    public Iterable<BaseClass> readCimObjects(String className, Iterable<Long> idList) {
        var readFunction = READ_MAP.get(className);
        return readFunction.apply(idList);
    }

    /**
     * Reads several CIM objects of the same type from the database.
     *
     * @param clazz  The class of the CIM objects.
     * @param idList The list of IDs of the CIM objects.
     * @return       The list of read CIM objects.
     */
    @SuppressWarnings("unchecked")
    public <T extends BaseClass> Iterable<T> readCimObjects(Class<T> clazz, Iterable<Long> idList) {
        var className = clazz.getSimpleName();
        return (Iterable<T>) readCimObjects(className, idList);
    }

    /**
     * Deletes several CIM objects of the same type from the database.
     *
     * The CIM objects have to be instances of the right class corresponding to the
     * class name. The delete function calls the deleteAllById method of the
     * repository embedded in this class.
     *
     * @param className The class name of the CIM objects.
     * @param idList    The list of IDs of the CIM objects.
     */
    public void deleteCimObjects(String className, Iterable<Long> idList) {
        var deleteFunction = DELETE_MAP.get(className);
        deleteFunction.accept(idList);
    }

    /**
     * Deletes several CIM objects of the same type from the database.
     *
     * @param clazz  The class of the CIM objects.
     * @param idList The list of IDs of the CIM objects.
     */
    public <T extends BaseClass> void deleteCimObjects(Class<T> clazz, Iterable<Long> idList) {
        var className = clazz.getSimpleName();
        deleteCimObjects(className, idList);
    }

    /**
     * Map of CIM class name to constructor function which creates a new CIM object.
     */
    private static final Map<String, Function<String, BaseClass>> CREATE_MAP;
    static {
        var map = new LinkedHashMap<String, Function<String, BaseClass>>();

{{#classes}}
        map.put("{{.}}", rdfid -> new {{.}}(rdfid));
{{/classes}}

        CREATE_MAP = Collections.unmodifiableMap(map);
    }

    /**
     * Repositories used to save and read CIM objects to/from the database.
     */
{{#classes}}
    @Autowired private {{.}}.Repository repo{{.}};
{{/classes}}

    /**
     * Map of CIM class name to function which saves several CIM objects to the database.
     */
    private final Map<String, Function<Iterable<BaseClass>, Iterable<BaseClass>>> SAVE_MAP;
    {
        var map = new LinkedHashMap<String, Function<Iterable<BaseClass>, Iterable<BaseClass>>>();

{{#classes}}
        map.put("{{.}}", objList -> saveAll(repo{{.}}, objList));
{{/classes}}

        SAVE_MAP = Collections.unmodifiableMap(map);
    }

    @SuppressWarnings("unchecked")
    private <T extends BaseClass> Iterable<BaseClass> saveAll(CrudRepository<T, Long> repo, Iterable<BaseClass> objList) {
        return (Iterable<BaseClass>) repo.saveAll((Iterable<T>) objList);
    }

    /**
     * Map of CIM class name to function which reads several CIM objects from the database.
     */
    private final Map<String, Function<Iterable<Long>, Iterable<BaseClass>>> READ_MAP;
    {
        var map = new LinkedHashMap<String, Function<Iterable<Long>, Iterable<BaseClass>>>();

{{#classes}}
        map.put("{{.}}", idList -> findAllById(repo{{.}}, idList));
{{/classes}}

        READ_MAP = Collections.unmodifiableMap(map);
    }

    @SuppressWarnings("unchecked")
    private <T extends BaseClass> Iterable<BaseClass> findAllById(CrudRepository<T, Long> repo, Iterable<Long> idList) {
        return (Iterable<BaseClass>) repo.findAllById(idList);
    }

    /**
     * Map of CIM class name to function which deletes several CIM objects from the database.
     */
    private final Map<String, Consumer<Iterable<Long>>> DELETE_MAP;
    {
        var map = new LinkedHashMap<String, Consumer<Iterable<Long>>>();

{{#classes}}
        map.put("{{.}}", idList -> repo{{.}}.deleteAllById(idList));
{{/classes}}

        DELETE_MAP = Collections.unmodifiableMap(map);
    }
}
